# A TOML linter such as https://taplo.tamasfe.dev/ can use this schema to validate your config.
# If you encounter any issues, please make an issue at https://github.com/yazi-rs/schemas.
"$schema" = "https://yazi-rs.github.io/schemas/yazi.json"

[manager]
ratio          = [ 2, 4, 3 ]
sort_by        = "natural"
sort_sensitive = false
sort_reverse 	 = false
sort_dir_first = true
sort_translit  = false
# linemode       = "size"
linemode       = "size_mtime_perm"
show_hidden    = true
show_symlink   = true
scrolloff      = 5
mouse_events   = [ "click", "scroll" ]
title_format   = "Yazi {cwd}"

[log]
enabled = true
level = "debug"  # Or "trace" for more detailed logs
file = "/Users/dexter/.config/yazi/yazi.log"

[preview]
tab_size        = 2
max_width       = 1200
max_height      = 1000
cache_dir       = ""
image_filter    = "triangle"
image_quality   = 75
sixel_fraction  = 15
ueberzug_scale  = 1
ueberzug_offset = [ 0, 0, 0, 0 ]

[opener]
edit = [
	{ run = '${EDITOR:=code} "$@"', desc = "$EDITOR", block = false, orphan = true, for = "macos" },
	{ run = 'code %*',    orphan = true, desc = "code",           for = "windows" },
	{ run = 'code -w %*', block = true,  desc = "code (block)",   for = "windows" },
]
open = [
	{ run = 'xdg-open "$1"',                desc = "Open", for = "linux" },
	{ run = 'open "$@"',                    desc = "Open", for = "macos" },
	{ run = 'start "" "%1"', orphan = true, desc = "Open", for = "windows" },
]
reveal = [
	{ run = 'xdg-open "$(dirname "$1")"',            desc = "Reveal", for = "linux" },
	{ run = 'open -R "$1"',                          desc = "Reveal", for = "macos" },
	{ run = 'explorer /select, "%1"', orphan = true, desc = "Reveal", for = "windows" },
	{ run = '''exiftool "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show EXIF", for = "unix" },
]
extract = [
	{ run = 'unar "$1"', desc = "Extract here", for = "unix" },
	{ run = 'unar "%1"', desc = "Extract here", for = "windows" },
]
play = [
	{ run = 'mpv --force-window "$@"', orphan = true, for = "unix" },
	{ run = 'mpv --force-window "%1"', orphan = true, for = "windows" },
	{ run = '''mediainfo "$1"; echo "Press enter to exit"; read _''', block = true, desc = "Show media info", for = "unix" },
]

[open]
rules = [
	{ name = "*/", use = [ "edit", "open", "reveal" ] },

	{ mime = "text/*",          use = [ "edit", "reveal" ] },
	{ mime = "image/*",         use = [ "open", "reveal" ] },
	{ mime = "{audio,video}/*", use = [ "play", "reveal" ] },
	{ mime = "inode/x-empty",   use = [ "edit", "reveal" ] },

	{ mime = "application/{,g}zip", use = [ "extract", "reveal" ] },
	{ mime = "application/x-{tar,bzip*,7z-compressed,xz,rar}", use = [ "extract", "reveal" ] },

	{ mime = "application/{json,x-ndjson}", use = [ "edit", "reveal" ] },
	{ mime = "*/javascript", use = [ "edit", "reveal" ] },

	{ name = "*", use = [ "open", "reveal" ] },
]

[tasks]
micro_workers    = 10
macro_workers    = 25
bizarre_retry    = 5
image_alloc      = 536870912  # 512MB
image_bound      = [ 0, 0 ]
suppress_preload = false

[plugin]

fetchers = [
	# Mimetype
	{ id = "mime", name = "*", run = "mime", if = "!mime", prio = "high" },
]
preloaders = [
	# Image
	{ mime = "image/{heic,jxl,svg+xml}", run = "magick" },
	{ mime = "image/*", run = "image" },
	# Video
	{ mime = "video/*", run = "video" },
	# PDF
	{ mime = "application/pdf", run = "pdf" },
	# Font
	{ mime = "font/*", run = "font" },
	{ mime = "application/vnd.ms-opentype", run = "font" },
]
previewers = [
	{ name = "*/", run = "folder", sync = true },
	# Code
	{ mime = "text/*", run = "code" },
	{ mime = "*/{xml,javascript,x-wine-extension-ini}", run = "code" },
	# JSON
	{ mime = "application/{json,x-ndjson}", run = "json" },
	# Image
	{ mime = "image/{heic,jxl,svg+xml}", run = "magick" },
	{ mime = "image/*", run = "image" },
	# Video
	{ mime = "video/*", run = "video" },
	# PDF
	{ mime = "application/pdf", run = "pdf" },
	# Archive
	{ mime = "application/{,g}zip", run = "archive" },
	{ mime = "application/x-{tar,bzip*,7z-compressed,xz,rar}", run = "archive" },
	# Font
	{ mime = "font/*", run = "font" },
	{ mime = "application/vnd.ms-opentype", run = "font" },
	# Fallback

	{ name = "*", run = "file" },
	# { name = "*.ipynb", run = "nbpreview" },
]

prepend_previewers = [
	# { name = "*.csv", run = "rich-preview"}, # for csv files
    { name = "*.md", run = "rich-preview" }, # for markdown (.md) files
    { name = "*.rst", run = "rich-preview"}, # for restructured text (.rst) files
    { name = "*.ipynb", run = "rich-preview"}, # for jupyter notebooks (.ipynb)
    # { name = "*.json", run = "rich-preview"}, # for jupyter notebooks (.ipynb)

    # Office Documents
    { mime = "application/vnd.openxmlformats-officedocument.*", run = "office" },
    { mime = "application/vnd.oasis.opendocument.*", run = "office" },
    { mime = "application/vnd.ms-*", run = "office" },
    { mime = "application/msword", run = "office" },
    { name = "*.docx", run = "office" },
    { name = "*.xlsx", run = "office" },

    # { name = "*.db", run = "preview" },
    # { name = "*.sqlite", run = "preview" },

	# { name = "*/", run = "eza-preview" },
]

# do not preview empty files
# append_previewers = [
#     { name = "*", run = "file-extra-metadata" },
# ]
# yazi v0.4 after 21/11/2024
# Setup keybind for spotter: https://github.com/sxyazi/yazi/pull/1802
append_spotters = [
    { name = "*", run = "file-extra-metadata" },
]

prepend_preloaders = [
    # # Office Documents
    { mime = "application/vnd.openxmlformats-officedocument.*", run = "office" },
    { mime = "application/vnd.oasis.opendocument.*", run = "office" },
    { mime = "application/vnd.ms-*", run = "office" },
    { mime = "application/msword", run = "office" },
    { name = "*.docx", run = "office" },
]


[input]
cursor_blink = true

# cd
cd_title  = "Change directory:"
cd_origin = "top-center"
cd_offset = [ 0, 2, 50, 3 ]

# create
# create_title  = "Create:"
create_title  = [ "Create:", "Create (dir):" ]
create_origin = "top-center"
create_offset = [ 0, 2, 50, 3 ]

# rename
rename_title  = "Rename:"
rename_origin = "hovered"
rename_offset = [ 0, 1, 50, 3 ]

# trash
trash_title 	= "Move {n} selected file{s} to trash? (y/N)"
trash_origin	= "top-center"
trash_offset	= [ 0, 2, 50, 3 ]

# delete
delete_title 	= "Delete {n} selected file{s} PERMANENTLY? (y/N)"
delete_origin	= "top-center"
delete_offset	= [ 0, 2, 50, 3 ]

# filter
filter_title  = "Filter:"
filter_origin = "top-center"
filter_offset = [ 0, 2, 50, 3 ]

# find
find_title  = [ "Find next:", "Find previous:" ]
find_origin = "top-center"
find_offset = [ 0, 2, 50, 3 ]

# search
search_title  = "Search via {n}:"
search_origin = "top-center"
search_offset = [ 0, 2, 50, 3 ]

# shell
shell_title  = [ "Shell:", "Shell (block):" ]
shell_origin = "top-center"
shell_offset = [ 0, 2, 50, 3 ]

# overwrite
overwrite_title  = "Overwrite an existing file? (y/N)"
overwrite_origin = "top-center"
overwrite_offset = [ 0, 2, 50, 3 ]

# quit
quit_title  = "{n} task{s} running, sure to quit? (y/N)"
quit_origin = "top-center"
quit_offset = [ 0, 2, 50, 3 ]

[select]
open_title  = "Open with:"
open_origin = "hovered"
open_offset = [ 0, 1, 50, 7 ]

[which]
sort_by      	 = "none"
sort_sensitive = false
sort_reverse 	 = false
sort_translit  = false

[[plugin.prepend_fetchers]]
id   = "mactag"
name = "*"
run  = "mactag"

[[plugin.prepend_fetchers]]
id   = "mactag"
name = "*/"
run  = "mactag"